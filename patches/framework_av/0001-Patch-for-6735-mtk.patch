From 98e9c1a025e5fd853ba9214dc5f610f93ff4b8d9 Mon Sep 17 00:00:00 2001
From: olegsvs <oleg.texet@gmail.com>
Date: Sun, 12 Jun 2016 13:17:40 -0400
Subject: [PATCH] Patch for 6735 mtk

Change-Id: I04fca74c8bd65b7223fae3e10cd17f052900ae47
---
 include/media/AudioSystem.h                        |   3 +
 include/media/IAudioFlinger.h                      |   3 +
 include/media/MediaPlayerInterface.h               |   1 +
 media/libmedia/Android.mk                          |   9 +
 media/libmedia/AudioSystem.cpp                     |  14 ++
 media/libmedia/IAudioFlinger.cpp                   |  76 ++++++++
 media/libmedia/mtkaudio_stubs.cpp                  | 215 +++++++++++++++++++++
 media/libmediaplayerservice/Android.mk             |   2 +
 media/libmediaplayerservice/MediaPlayerFactory.cpp |  22 +++
 services/audioflinger/AudioFlinger.cpp             |  60 ++++++
 services/audioflinger/AudioFlinger.h               |   3 +
 11 files changed, 408 insertions(+)
 create mode 100644 media/libmedia/mtkaudio_stubs.cpp

diff --git a/include/media/AudioSystem.h b/include/media/AudioSystem.h
index 698bf2e..606b015 100644
--- a/include/media/AudioSystem.h
+++ b/include/media/AudioSystem.h
@@ -332,6 +332,9 @@ public:
 
     static status_t registerPolicyMixes(Vector<AudioMix> mixes, bool registration);
 
+    static status_t getAudioData(int par, unsigned long size, char * buffer);
+    static status_t setAudioData(int par, unsigned long size, char * buffer);
+
     // ----------------------------------------------------------------------------
 
     class AudioPortCallback : public RefBase
diff --git a/include/media/IAudioFlinger.h b/include/media/IAudioFlinger.h
index 54be5f3..dc88930 100644
--- a/include/media/IAudioFlinger.h
+++ b/include/media/IAudioFlinger.h
@@ -258,6 +258,9 @@ public:
 
     /* Get the HW synchronization source used for an audio session */
     virtual audio_hw_sync_t getAudioHwSyncForSession(audio_session_t sessionId) = 0;
+
+    virtual status_t getAudioData(int par, unsigned long size, char * buffer) = 0;
+    virtual status_t setAudioData(int par, unsigned long size, char * buffer) = 0;
 };
 
 
diff --git a/include/media/MediaPlayerInterface.h b/include/media/MediaPlayerInterface.h
index b95f949..4760ba2 100644
--- a/include/media/MediaPlayerInterface.h
+++ b/include/media/MediaPlayerInterface.h
@@ -54,6 +54,7 @@ enum player_type {
     // argument to the 'test:' url in the setDataSource call.
     TEST_PLAYER = 5,
     DASH_PLAYER = 6,
+    FM_AUDIO_PLAYER=7,
 };
 
 
diff --git a/media/libmedia/Android.mk b/media/libmedia/Android.mk
index 139d6f8..109ab26 100644
--- a/media/libmedia/Android.mk
+++ b/media/libmedia/Android.mk
@@ -124,6 +124,15 @@ LOCAL_C_INCLUDES := \
     $(call include-path-for, audio-effects) \
     $(call include-path-for, audio-utils)
 
+
+ifeq ($(MTK_HARDWARE),true)
+LOCAL_SRC_FILES += \
+    mtkaudio_stubs.cpp
+
+# StrongPointer.h
+LOCAL_C_INCLUDES += $(TOP)/frameworks/rs/server
+endif
+
 include $(BUILD_SHARED_LIBRARY)
 
 include $(CLEAR_VARS)
diff --git a/media/libmedia/AudioSystem.cpp b/media/libmedia/AudioSystem.cpp
index 9cae21c..d7b28b1 100644
--- a/media/libmedia/AudioSystem.cpp
+++ b/media/libmedia/AudioSystem.cpp
@@ -999,4 +999,18 @@ void AudioSystem::AudioPolicyServiceClient::onAudioPatchListUpdate()
     }
 }
 
+status_t AudioSystem::getAudioData(int par, unsigned long size, char * buffer)
+{
+    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
+    if (af == 0) return 0;
+    return af->getAudioData(par, size, buffer);
+}
+
+status_t AudioSystem::setAudioData(int par, unsigned long size, char * buffer)
+{
+    const sp<IAudioFlinger>& af = AudioSystem::get_audio_flinger();
+    if (af == 0) return 0;
+    return af->setAudioData(par, size, buffer);
+}
+
 }; // namespace android
diff --git a/media/libmedia/IAudioFlinger.cpp b/media/libmedia/IAudioFlinger.cpp
index 3f76506..366f42c 100644
--- a/media/libmedia/IAudioFlinger.cpp
+++ b/media/libmedia/IAudioFlinger.cpp
@@ -85,6 +85,8 @@ enum {
 #ifdef QCOM_DIRECTTRACK
     CREATE_DIRECT_TRACK,
 #endif
+    GET_AUDIO_DATA,
+    SET_AUDIO_DATA,
 };
 
 #define MAX_ITEMS_PER_LIST 1024
@@ -944,6 +946,44 @@ public:
         }
         return (audio_hw_sync_t)reply.readInt32();
     }
+
+    virtual status_t getAudioData(int par, unsigned long size, char * buffer)
+    {
+        ALOGV("getAudioData: %d, %d, %p", par, size, buffer);
+        if (buffer == NULL || size == 0) {
+            return BAD_VALUE;
+        }
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeInt32(par);
+        data.writeInt32(size);
+        data.write(buffer, size);
+        status_t status = remote()->transact(GET_AUDIO_DATA, data, &reply);
+        if (status != NO_ERROR ||
+                (status = (status_t)reply.readInt32()) != NO_ERROR) {
+            return status;
+        }
+        reply.read(buffer, size);
+        return status;
+    }
+
+    virtual status_t setAudioData(int par, unsigned long size, char * buffer)
+    {
+        ALOGV("setAudioData: %d, %d, %p", par, size, buffer);
+        if (buffer == NULL || size == 0) {
+            return BAD_VALUE;
+        }
+        Parcel data, reply;
+        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
+        data.writeInt32(par);
+        data.writeInt32(size);
+        data.write(buffer, size);
+        status_t status = remote()->transact(SET_AUDIO_DATA, data, &reply);
+        if (status == NO_ERROR) {
+            status = (status_t)reply.readInt32();
+        }
+        return status;
+    }
 };
 
 IMPLEMENT_META_INTERFACE(AudioFlinger, "android.media.IAudioFlinger");
@@ -1465,6 +1505,42 @@ status_t BnAudioFlinger::onTransact(
             reply->writeInt32(getAudioHwSyncForSession((audio_session_t)data.readInt32()));
             return NO_ERROR;
         } break;
+        case GET_AUDIO_DATA: {
+            CHECK_INTERFACE(IAudioFlinger, data, reply);
+            int par = data.readInt32();
+            unsigned long size = data.readInt32();
+            ALOGV("GET_AUDIO_DATA: %d, %d", par, size);
+            char * buffer = (char*)calloc(size, 1);
+            if (buffer == NULL) {
+                reply->writeInt32(NO_MEMORY);
+                reply->writeInt32(0);
+                return NO_ERROR;
+            }
+            status_t status = getAudioData(par, size, buffer);
+            reply->writeInt32(status);
+            if (status == NO_ERROR) {
+                reply->write(buffer, size);
+            }
+            free(buffer);
+            return NO_ERROR;
+        } break;
+        case SET_AUDIO_DATA: {
+            CHECK_INTERFACE(IAudioFlinger, data, reply);
+            int par = data.readInt32();
+            unsigned long size = data.readInt32();
+            ALOGV("SET_AUDIO_DATA: %d, %d", par, size);
+            char * buffer = (char*)calloc(size, 1);
+            if (buffer == NULL) {
+                reply->writeInt32(NO_MEMORY);
+                reply->writeInt32(0);
+                return NO_ERROR;
+            }
+            data.read(buffer, size);
+            status_t status = setAudioData(par, size, buffer);
+            reply->writeInt32(status);
+            free(buffer);
+            return NO_ERROR;
+        } break;
         default:
             return BBinder::onTransact(code, data, reply, flags);
     }
diff --git a/media/libmedia/mtkaudio_stubs.cpp b/media/libmedia/mtkaudio_stubs.cpp
new file mode 100644
index 0000000..f67277c
--- /dev/null
+++ b/media/libmedia/mtkaudio_stubs.cpp
@@ -0,0 +1,215 @@
+// #include <MtpTypes.h>
+#include <system/audio.h>
+#include <StrongPointer.h>
+#include <media/IAudioFlinger.h>
+#include <hardware/audio.h>
+#include <stdlib.h>
+#include <dlfcn.h>
+
+namespace android {
+
+typedef void (*audio_error_callback)(status_t err);
+
+class AudioSystem
+{
+public:
+    static bool getVoiceUnlockDLInstance();
+    static int GetVoiceUnlockDLLatency();
+    static int SetVoiceUnlockSRC(uint outSR, uint outChannel);
+    static bool stopVoiceUnlockDL();
+    static bool startVoiceUnlockDL();
+    static int ReadRefFromRing(void*buf, uint32_t datasz,void* DLtime);
+    static int GetVoiceUnlockULTime(void* DLtime);
+    static void freeVoiceUnlockDLInstance();
+
+}; // class
+
+bool AudioSystem::getVoiceUnlockDLInstance()
+{
+  return 0;
+}
+
+int AudioSystem::GetVoiceUnlockDLLatency()
+{
+  return 0;
+}
+
+int AudioSystem::SetVoiceUnlockSRC(uint outSR, uint outChannel)
+{
+  return 0;
+}
+
+bool AudioSystem::stopVoiceUnlockDL()
+{
+  return 0;
+}
+
+bool AudioSystem::startVoiceUnlockDL()
+{
+  return 0;
+}
+
+int AudioSystem::ReadRefFromRing(void*buf, uint32_t datasz,void* DLtime)
+{
+  return 0;
+}
+
+int AudioSystem::GetVoiceUnlockULTime(void* DLtime)
+{
+  return 0;
+}
+
+void AudioSystem::freeVoiceUnlockDLInstance()
+{
+  return;
+}
+
+class IATVCtrlClient
+{
+};
+
+class IATVCtrlService: public IInterface
+{
+public:
+  DECLARE_META_INTERFACE(ATVCtrlService);
+};
+
+class BpATVCtrlService : public BpInterface<IATVCtrlService>
+{
+public:
+    BpATVCtrlService(const sp<IBinder>& impl)
+        : BpInterface<IATVCtrlService>(impl)
+    {
+    }
+    virtual ~BpATVCtrlService()
+    {
+    }
+    virtual int ATVCS_matv_init()
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_ps_init(int on)
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_set_parameterb(int in)
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_suspend(int on)
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_shutdown()
+    {
+        return 0;
+    }
+    virtual void ATVCS_matv_chscan(int mode)
+    {
+    }
+    virtual void ATVCS_matv_chscan_stop()
+    {
+    }
+    virtual int ATVCS_matv_get_chtable(int ch, void *entry, int len)
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_set_chtable(int ch, void *entry, int len)
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_clear_chtable()
+    {
+        return 0;
+    }
+    virtual void ATVCS_matv_change_channel(int ch)
+    {
+    }
+    virtual void ATVCS_matv_set_country(int country)
+    {
+    }
+    virtual void ATVCS_matv_set_tparam(int mode)
+    {
+    }
+    virtual void ATVCS_matv_audio_play()
+    {
+    }
+    virtual void ATVCS_matv_audio_stop()
+    {
+    }
+    virtual int ATVCS_matv_audio_get_format()
+    {
+        return 0;
+    }
+    virtual void ATVCS_matv_audio_set_format(int val)
+    {
+    }
+    virtual int ATVCS_matv_audio_get_sound_system()
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_adjust(int item, int val)
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_get_chipdep(int item)
+    {
+        return 0;
+    }
+    virtual int ATVCS_matv_set_chipdep(int item, int val)
+    {
+        return 0;
+    }
+    virtual void ATVCS_matv_register_callback()
+    {
+    }
+    virtual void registerClient(const sp<IATVCtrlClient>& client)
+    {
+    }
+    virtual void registerClient_FM(const sp<IATVCtrlClient>& client)
+    {
+    }
+    virtual void CLI(char input)
+    {
+    }
+    virtual int ATVCS_fm_powerup(void *parm, int len)
+    {
+        return 0;
+    }
+    virtual int ATVCS_fm_powerdown()
+    {
+        return 0;
+    }
+    virtual int ATVCS_fm_getrssi()
+    {
+        return 0;
+    }
+    virtual int ATVCS_fm_tune(void *parm, int len)
+    {
+        return 0;
+    }
+    virtual int ATVCS_fm_seek(void *parm, int len)
+    {
+        return 0;
+    }
+    virtual int ATVCS_fm_scan(void *parm, int len)
+    {
+        return 0;
+    }
+    virtual int ATVCS_fm_mute(int val)
+    {
+        return 0;
+    }
+    virtual int ATVCS_fm_getchipid()
+    {
+        return 0;
+    }
+    virtual int ATVCS_fm_isFMPowerUp()
+    {
+        return 0;
+    }
+};
+
+IMPLEMENT_META_INTERFACE(ATVCtrlService, "android.media.IATVCtrlService");
+
+} // namespace
diff --git a/media/libmediaplayerservice/Android.mk b/media/libmediaplayerservice/Android.mk
index 8f06c55..6003b01 100644
--- a/media/libmediaplayerservice/Android.mk
+++ b/media/libmediaplayerservice/Android.mk
@@ -43,6 +43,7 @@ LOCAL_SHARED_LIBRARIES :=       \
     libutils                    \
     libvorbisidec               \
     libdrmframework             \
+    libmtkplayer
 
 LOCAL_STATIC_LIBRARIES :=       \
     libstagefright_nuplayer     \
@@ -55,6 +56,7 @@ LOCAL_C_INCLUDES :=                                                 \
     $(TOP)/frameworks/av/media/libstagefright/webm                  \
     $(TOP)/frameworks/native/include/media/openmax                  \
     $(TOP)/external/tremolo/Tremolo                                 \
+    $(TOP)/device/acer/T03/mtk/fmaudioplayer
 
 LOCAL_MODULE:= libmediaplayerservice
 
diff --git a/media/libmediaplayerservice/MediaPlayerFactory.cpp b/media/libmediaplayerservice/MediaPlayerFactory.cpp
index 03fae91..54ea2cf 100644
--- a/media/libmediaplayerservice/MediaPlayerFactory.cpp
+++ b/media/libmediaplayerservice/MediaPlayerFactory.cpp
@@ -1,4 +1,9 @@
 /*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
 **
 ** Copyright 2012, The Android Open Source Project
 **
@@ -33,6 +38,7 @@
 #include "TestPlayerStub.h"
 #include "StagefrightPlayer.h"
 #include "nuplayer/NuPlayerDriver.h"
+#include "FMAudioPlayer.h"
 #include <dlfcn.h>
 
 namespace android {
@@ -387,6 +393,21 @@ class TestPlayerFactory : public MediaPlayerFactory::IFactory {
         return new TestPlayerStub();
     }
 };
+class FMPlayerFactory : public MediaPlayerFactory::IFactory {
+  public:
+    virtual float scoreFactory(const sp<IMediaPlayer>& client,
+                               const char* url,
+                               float curScore) {
+        if(strncmp(url, "THIRDPARTY://MEDIAPLAYER_PLAYERTYPE_FM", 38) == 0)
+           return 1.0;
+        return 0.0;
+    }
+
+    virtual sp<MediaPlayerBase> createPlayer() {
+        return new FMAudioPlayer();
+        return NULL;
+    }
+};
 
 void MediaPlayerFactory::registerBuiltinFactories() {
     Mutex::Autolock lock_(&sLock);
@@ -398,6 +419,7 @@ void MediaPlayerFactory::registerBuiltinFactories() {
     registerFactory_l(new NuPlayerFactory(), NU_PLAYER);
     registerFactory_l(new SonivoxPlayerFactory(), SONIVOX_PLAYER);
     registerFactory_l(new TestPlayerFactory(), TEST_PLAYER);
+    registerFactory_l(new FMPlayerFactory(), FM_AUDIO_PLAYER);
 
     const char* FACTORY_LIB           = "libdashplayer.so";
     const char* FACTORY_CREATE_FN     = "CreateDASHFactory";
diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 0c9b646..ce68a78 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -1,4 +1,9 @@
 /*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
 ** Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
 ** Not a Contribution.
 ** Copyright 2007, The Android Open Source Project
@@ -1151,6 +1156,19 @@ status_t AudioFlinger::setStreamVolume(audio_stream_type_t stream, float value,
         thread->setStreamVolume(stream, value);
     }
 
+    // change by hochi for fm volume
+    if(stream == AUDIO_STREAM_MUSIC)
+    {
+        sp<ThreadBase> thread;
+        thread = checkPlaybackThread_l(output);
+        if (thread == primaryPlaybackThread_l())
+        {
+            //MTK_ALOG_D("setStreamVolume FM  value = %f",value);
+            audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+            dev->set_parameters (dev,String8::format("SetFmVolume=%f",value));
+        }
+    }
+
     return NO_ERROR;
 }
 
@@ -1165,6 +1183,12 @@ status_t AudioFlinger::setStreamMute(audio_stream_type_t stream, bool muted)
     if (status != NO_ERROR) {
         return status;
     }
+    if(stream == AUDIO_STREAM_MUSIC)
+    {
+        //MTK_ALOG_D("setStreamMute MATV muted=%d",muted);
+        audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+        dev->set_parameters (dev,String8::format("SetMatvMute=%d",muted));
+    }
     ALOG_ASSERT(stream != AUDIO_STREAM_PATCH, "attempt to mute AUDIO_STREAM_PATCH");
 
     if (uint32_t(stream) == AUDIO_STREAM_ENFORCED_AUDIBLE) {
@@ -3334,6 +3358,42 @@ void AudioFlinger::dumpTee(int fd, const sp<NBAIO_Source>& source, audio_io_hand
 }
 #endif
 
+status_t AudioFlinger::getAudioData(int par, unsigned long size, char * buffer)
+{
+    status_t result = BAD_VALUE;
+    ALOGV("getAudioData: par=%d, size=%d, buffer=%p", par, size, buffer);
+    Mutex::Autolock _l(mLock);
+    if (mPrimaryHardwareDev != NULL) {
+        audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+        if (dev != NULL && dev->get_audio_data != NULL) {
+            result = dev->get_audio_data(dev, par, size, buffer);
+        } else {
+            ALOGE("getAudioData: dev or get_audio_data is NULL");
+        }
+    } else {
+        ALOGE("getAudioData: mPrimaryHardwareDev is NULL");
+    }
+    return result;
+}
+
+status_t AudioFlinger::setAudioData(int par, unsigned long size, char * buffer)
+{
+    status_t result = BAD_VALUE;
+    ALOGV("setAudioData: par=%d, size=%d, buffer=%p", par, size, buffer);
+    Mutex::Autolock _l(mLock);
+    if (mPrimaryHardwareDev != NULL) {
+        audio_hw_device_t *dev = mPrimaryHardwareDev->hwDevice();
+        if (dev != NULL && dev->set_audio_data != NULL) {
+            result = dev->set_audio_data(dev, par, size, buffer);
+        } else {
+            ALOGE("setAudioData: dev or get_audio_data is NULL");
+        }
+    } else {
+        ALOGE("setAudioData: mPrimaryHardwareDev is NULL");
+    }
+    return result;
+}
+
 status_t AudioFlinger::onTransact(
         uint32_t code, const Parcel& data, Parcel* reply, uint32_t flags)
 {
diff --git a/services/audioflinger/AudioFlinger.h b/services/audioflinger/AudioFlinger.h
index 60eed29..4067df8 100644
--- a/services/audioflinger/AudioFlinger.h
+++ b/services/audioflinger/AudioFlinger.h
@@ -295,6 +295,9 @@ public:
     /* Get the HW synchronization source used for an audio session */
     virtual audio_hw_sync_t getAudioHwSyncForSession(audio_session_t sessionId);
 
+    virtual status_t getAudioData(int par, unsigned long size, char * buffer);
+    virtual status_t setAudioData(int par, unsigned long size, char * buffer);
+
     virtual     status_t    onTransact(
                                 uint32_t code,
                                 const Parcel& data,
-- 
1.9.1

